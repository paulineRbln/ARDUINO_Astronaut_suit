import React, { useState } from 'react';

function App() {
  const [connectionStatus, setConnectionStatus] = useState('');
  const [temperature, setTemperature] = useState(null);

  const connectToNano = async () => {
    setConnectionStatus('Connexion en cours...');

    try {
      const device = await navigator.bluetooth.requestDevice({
        filters: [{ name: 'Nano33BLESense' }],
        optionalServices: ['00001234-0000-1000-8000-00805f9b34fb']  // Ajoute l'UUID du service ici
      });

      const server = await device.gatt.connect();
      console.log('‚úÖ Connect√© √†', device.name);

      // Mettre √† jour le statut de la connexion
      setConnectionStatus(`Connect√© √† ${device.name}`);

      // R√©cup√©rer le service et la caract√©ristique avec l'UUID correct
      const service = await server.getPrimaryService('00001234-0000-1000-8000-00805f9b34fb'); // UUID complet du service
      const characteristic = await service.getCharacteristic('00005678-0000-1000-8000-00805f9b34fb');  // UUID complet de la caract√©ristique
      await characteristic.startNotifications();  // D√©marrer les notifications

      // √âcouter les notifications de la caract√©ristique
      characteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);

    } catch (err) {
      console.error('‚ùå Erreur de connexion BLE :', err);
      setConnectionStatus('Erreur de connexion');
    }
  };

  // Fonction de gestion des notifications
  const handleCharacteristicValueChanged = (event) => {
    const value = event.target.value;
    const receivedData = new TextDecoder().decode(value); // D√©coder les donn√©es re√ßues
    console.log('Donn√©es re√ßues:', receivedData);

    // Extraire la temp√©rature de la cha√Æne de donn√©es
    const dataParts = receivedData.split(',');
    const temp = dataParts[1];  // Temp√©rature est la deuxi√®me valeur

    setTemperature(temp);  // Mettre √† jour l'√©tat de la temp√©rature
  };

  return (
    <div className="App">
      <h1>Connexion √† la Nano 33 BLE Sense</h1>
      <button onClick={connectToNano}>üîó Se connecter √† la carte</button>

      {/* Affichage du statut de la connexion */}
      {connectionStatus && <p>{connectionStatus}</p>}

      {/* Affichage de la temp√©rature re√ßue */}
      {temperature !== null && <p>Temp√©rature re√ßue : {temperature}¬∞C</p>}
    </div>
  );
}

export default App;
